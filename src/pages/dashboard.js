import { useNavigate } from "react-router-dom";
import { useState, useEffect, useContext } from "react";
import { Skeleton } from "@mui/material";
import dayjs from "dayjs";

import Api from "../services/api";
import Layout from "../components/Layout";
import AuthContext from "../auth/AuthContext";
import { getTimeDifference } from "../lib/getTimeDifference"; // do not edit this file

const Dashboard = () => {
  const navigate = useNavigate();
  const authUser = useContext(AuthContext);

  const [patients, setPatients] = useState([]);
  const [assessments, setAssessments] = useState([])
  const [isLoading, setIsLoading] = useState(true);
  const [recentDuration, setRecentDuration] = useState();
  const [screenedPatients, setScreenedPatients] = useState([]);
  const [nonScreenedPatients, setNonScreenedPatients] = useState([]);

  const getUser = async () => {
    try {
      const response = await Api().get("/@me");
      if (response.status === 200) {
        authUser.setUser(response.data);
        localStorage.setItem("isLogin", true);
      }
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    getUser();
    getDashboardData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  let patientDetailsPath = "../patient-details/id=";

  const getDashboardData = async () => {
    const response = await Api().get("/dashboard");
    if (response.status === 200) {
      setData(response.data);
      setIsLoading(false);
    }
  };

  const setData = (data) => {
    const patients = data.patients;
    const assessments = data.assessments;
    
    setPatients(data.patients);
    setAssessments(data.assessments)
    setScreenedPatients(data.screened_patients);

    const difference = [...getDifference(patients, assessments)];
    setNonScreenedPatients(difference);

    setAverageDuration(data.assessments);
  };

  const getDifference = (patients, assessments) => {
    return patients.filter((patient) => {
      return !assessments.some((assessment) => {
        return patient.id === assessment.patient_id;
      });
    });
  };

  const formatTo2Digits = (num) => {
    return num.toString().padStart(2, "0");
  };

  const setAverageDuration = (assessments) => {
    let milliseconds = 0;
    assessments.forEach((assessment) => {
      milliseconds +=
        (new Date(assessment.date_finished).getTime() -
          new Date(assessment.date_taken).getTime())
    });

    let avgMilliseconds = milliseconds / assessments.length
    let second = (avgMilliseconds / 1000);
    let minute = Math.floor(second / 60);
    let hour = Math.floor(minute / 60);

    second = second % 60;
    minute = minute % 60;
    hour = hour % 24;

    setRecentDuration(
      formatTo2Digits(hour) +
      " : " +
      formatTo2Digits(minute) +
      " : " +
      Math.floor(second)
    );
  };

  const generateSkeletons = (rows) => {
    return [...Array(rows).keys()].map((key) => (
      <Skeleton key={key} variant="text" sx={{ fontSize: "1.75rem" }} width="100%" />
    ))
  };

  const formatDate = (date) => {

    if (date === null)
      return 'N/A'

    const d = dayjs(date)
    return d.format('MMMM DD, YYYY')
  }

  const getAssessmentDate = (patient) => {
    const dt = assessments.map(assessment => {
      if(assessment.patient_id === patient.id) return assessment.date_taken
    })

    const de = assessments.map(assessment => {
      if(assessment.patient_id === patient.id) return assessment.date_finished
    })

    const dateTaken = dt.filter(data => data !== undefined)
    const dateEnded = de.filter(data => data !== undefined)

    return [dateTaken, dateEnded]
  }

  const getScreeningTime = (patient) => {
    const [dateTaken, dateFinished] = getAssessmentDate(patient)
    
    // do not edit the getTimeDifference() function
    const elapsedTime = {...getTimeDifference(dateTaken, dateFinished)}

    let text = ''
    if (elapsedTime.h === 0) {
      text += ''
    } else if (elapsedTime.h === 1) {
      text += '1 hour '
    } else {
      text += `${elapsedTime.h} hours `
    }

    if (elapsedTime.m === 0) {
      text += ''
    } else if (elapsedTime.m === 1) {
      text += '1 minute '
    } else {
      text += `${elapsedTime.m} minutes `
    }

    if (elapsedTime.s === 0) {
      text += ''
    } else if (elapsedTime.s === 1) {
      text += '1 second '
    } else {
      text += `${elapsedTime.s} seconds`
    }

    return text
  }

  return (
    <Layout>
      <div className="container">
        <section className="py-4 mb-4">

          <div className="card p-3 bg-primary bg-gradient mb-4 shadow">
            <div className="row">
              <div className="col-12 col-sm-6 col-xl-4">
                <div className="col mb-2 h-100">
                  <div className="card text-dark mb-0 shadow border border-primary h-100" role="button">
                    <div className="card-body row">
                      <div className="col-9 d-flex flex-column justify-content-center">
                        <p className="card-title mb-0 text-muted">Total Patients</p>
                        <h3 className="card-text text-dark">{(isLoading && generateSkeletons(1)) || patients.length}</h3>
                      </div>
                      <div className="col-3 d-flex flex-column justify-content-center">
                        <span><i className="bi bi-people-fill fs-1 text-primary"></i></span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="col-12 col-sm-6 col-xl-4">
                <div className="col mb-2 h-100">
                  <div className="card text-dark mb-0 shadow border border-primary h-100" role="button">
                    <div className="card-body row">
                      <div className="col-9  d-flex flex-column justify-content-center">
                        <p className="card-title mb-0 text-muted">Total Screened Patients</p>
                        <h3 className="card-text text-dark">{(isLoading && generateSkeletons(1)) || screenedPatients.length}</h3>
                      </div>
                      <div className="col-3  d-flex flex-column justify-content-center">
                        <span><i className="bi bi-heart-pulse-fill fs-1 text-primary"></i></span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="col-12 col-sm-12 col-xl-4">
                <div className="col mb-2 h-100">
                  <div className="card text-dark mb-0 shadow border border-primary h-100" role="button">
                    <div className="card-body row">
                      <div className="col-9 d-flex flex-column justify-content-center">
                        <p className="card-title mb-0 text-muted">Average Screening Time Duration</p>
                        <div>
                          <h4 className="card-text text-dark mb-0">{(isLoading && generateSkeletons(1)) || recentDuration}</h4>
                          <p className="mb-0" style={{ fontSize: "12px" }}>
                            Hours / minutes / seconds
                          </p>
                        </div>
                      </div>
                      <div className="col-3 d-flex flex-column justify-content-center">
                        <span><i className="bi bi-hourglass-bottom fs-1 text-primary"></i></span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div className="row mb-4">

            {/* Recently Screened Patients */}
            <div className="col-12 col-xl-6 col-lg-6 mb-4 mb-lg-0">
              <div className="card text-black bg-light rounded px-0 shadow-lg" >
                <div id="sales-overview" className="card-header d-flex justify-content-between align-items-center bg-primary">
                  <h5 className='mb-0 p-1 text-white'>Recently Screened Patients</h5>
                </div>
                <div className="card-body">
                  <div className="h-100">
                    <div className="table-responsive position-relative" >
                      <table className="table table-hover position-sticky">
                        <thead className="position-sticky" style={{
                          'width': 'calc( 100% - 1em )'
                        }}>
                          <tr style={{
                            'display': 'table',
                            'width': '100%',
                            'tableLayout': 'fixed',
                          }}>
                            <th style={{ 'width': '30%' }}>Patient ID</th>
                            <th>Full Name</th>
                            <th>Screening Time</th>
                          </tr>
                        </thead>
                        <tbody className="custom-scroll" style={{
                          'display': 'block',
                          'height': '500px',
                          'overflow': 'auto'
                        }}>
                          {isLoading && (
                            <tr style={{ 'display': 'table', 'width': '100%', 'tableLayout': 'fixed' }}>
                              <td>{generateSkeletons(15)}</td>
                              <td>{generateSkeletons(15)}</td>
                              <td>{generateSkeletons(15)}</td>
                            </tr>

                          )}

                          {!isLoading &&
                            screenedPatients.map((patient, index) => (
                              <tr key={index} onClick={() => {
                                navigate(patientDetailsPath + patient.id);
                              }} role="button" style={{
                                'display': 'table',
                                'width': '100%',
                                'tableLayout': 'fixed'
                              }}>
                                <td className="py-4" style={{ 'width': '30%' }}>
                                  {patient.id}
                                </td>
                                <td className="py-4">
                                  {patient.fullname}
                                </td>
                                <td className="py-4">
                                  {getScreeningTime(patient)}
                                </td>
                              </tr>
                            ))}

                          {!isLoading && screenedPatients.length === 0 && (
                            <tr className="w-100" style={{ 'display': 'table' }}>
                              <td colSpan="3">
                                <div className='d-flex align-items-center justify-content-center' style={{ width: "100%", height: "250px" }}>
                                  <i>None of your patients have been screened yet</i>
                                </div>
                              </td>
                            </tr>
                          )}

                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Patients To be Screened */}
            <div className="col-12 col-xl-6 col-lg-6 mb-4 mb-lg-0">
              <div className="card text-black bg-light rounded px-0 shadow-lg" style={{ 'minHeight': '650px', 'height': '650px' }}>
                <div id="sales-overview" className="card-header d-flex justify-content-between align-items-center bg-primary">
                  <h5 className='mb-0 p-1 text-white'>Patients To Be Screened</h5>
                </div>
                <div className="card-body">
                  <div className='h-100'>
                    <div className="table-responsive position-relative" >
                      <table className="table table-hover position-sticky">
                        <thead className="position-sticky" style={{
                          'width': 'calc( 100% - 1em )'
                        }}>
                          <tr style={{
                            'display': 'table',
                            'width': '100%',
                            'tableLayout': 'fixed',
                          }}>
                            <th style={{ 'width': '30%' }}>Patient ID</th>
                            <th>Full Name</th>
                            <th>Registered Date</th>
                          </tr>
                        </thead>
                        <tbody className="custom-scroll" style={{
                          'display': 'block',
                          'height': '500px',
                          'overflow': 'auto'
                        }}>
                          {isLoading && (
                            <tr style={{ 'display': 'table', 'width': '100%', 'tableLayout': 'fixed' }}>
                              <td>{generateSkeletons(15)}</td>
                              <td>{generateSkeletons(15)}</td>
                              <td>{generateSkeletons(15)}</td>
                            </tr>

                          )}

                          {!isLoading && nonScreenedPatients.length !== 0 &&
                            nonScreenedPatients.map((patient, index) => (
                              <tr key={index} onClick={() => {
                                navigate(patientDetailsPath + patient.id);
                              }} role="button" style={{
                                'display': 'table',
                                'width': '100%',
                                'tableLayout': 'fixed'
                              }}>
                                <td className="py-4" style={{ 'width': '30%' }}>
                                  {patient.id}
                                </td>
                                <td className="py-4">
                                  {patient.fullname}
                                </td>
                                <td className="py-4">
                                  {formatDate(patient.registered_date)}
                                </td>
                              </tr>
                            ))}

                          {!isLoading && nonScreenedPatients.length === 0 && (
                            <tr className="w-100" style={{ 'display': 'table' }}>
                              <td colSpan="3">
                                <div className='d-flex align-items-center justify-content-center' style={{ width: "100%", height: "250px" }}>
                                  <i>You currently have no patients registered.</i>
                                </div>
                              </td>
                            </tr>
                          )}

                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>
      </div >
    </Layout >
  );
};

export default Dashboard;
